install.packages(“tableone”)
install.packages("tableone")
install.packages(“Matching”)
install.packages(“Matching”)
install.packages(c("Matching", "MatchIt"))
# install.packages(“tableone”)
# install.packages(“Matching”)
# install.packages("MatchIt")
library(tableone)
library(Matching)
# Now load the lalonde data (which is in the MatchIt package):
library(MatchIt)
data(lalonde)
View(lalonde)
# create a data set with just these variables, for simplicity
age <- lalonde$age
educ <- lalonde$educ
black <- as.numeric(lalonde$race=='black')
hispan <- as.numeric(lalonde$race=='hispan')
married <- lalonde$married
nodegree <- lalonde$nodegree
re74 <- lalonde$re74
re75 <- lalonde$re75
treatment <- lalonde$treat
outcome <- lalonde$re78
mydata <- cbind(age, educ, black, hispan, married, nodegree, re74, re75, treatment, outcome)
mydata <- data.frame(mydata)
# covariates we will use (shorter list than you would use in practice
xvars <- c("age", "educ", "black", "hispan", "married", "nodegree", "re74", "re75")
# look at table 1 on pre-matching
table1 <- CreateTableOne(vars=xvars, strata="treatment", data=mydata, test=FALSE)
# include standardized mean difference (SMD)
print (table1, smd=TRUE)
mydata$treatment[mydata$treatment == 1] - mydata$treatment[mydata$treatment == 0]
t.test(mydata$treatment[mydata$treatment == 1] - mydata$treatment[mydata$treatment == 0])
mean(mydata$treatment[mydata$treatment == 1] - mydata$treatment[mydata$treatment == 0])
mean(mydata$treatment[mydata$treatment == 1] - mydata$treatment[mydata$treatment == 0])
mean(mydata$treatment[mydata$treatment == 1]) - mean(mydata$treatment[mydata$treatment == 0])
mean(mydata$outcome[mydata$treatment == 1]) - mean(mydata$outcome[mydata$treatment == 0])
# fit a propensity score model using logistic regression
psmodel <- glm(
treatment ~ age + educ + black + hispan + married + nodegree + re74 + re75,
family = binomial(), # outcome is binary
data=mydata
)
# show coefficients etc
summary(psmodel)
# create propensity score
pscore <- psmolde$fitted.values
# create propensity score
pscore <- psmodel$fitted.values
max(pscore)
min(pscore)
# use matchit for propensity score, nearest neighbor matching
m.out <- matchit(
treatment ~ age + educ + black + hispan + married + nodegree + re74 + re75,
data=mydata,
method="nearest"
)
summary(m.out)
# re-do greedy matching on logit(PS) using caliper
psmatch <- Match(Tr=mydata$treatment, M=1, X=pscore, replace=FALSE)
matched <- mydata[unlist(psmatch[c("index.treated", "index.control")]), ]
xvars
matchedtab1 <- CreateTableOne(vars=xvars, strata="treatment", data=matched, test=FALSE)
print (matchedtab1, smd=TRUE)
matchedtab1 <- CreateTableOne(vars=pscore, strata="treatment", data=matched, test=FALSE)
# re-do greedy matching on logit(PS) using caliper
psmatch <- Match(Tr=mydata$treatment, M=1, X=pscore, replace=FALSE)
matched <- mydata[unlist(psmatch[c("index.treated", "index.control")]), ]
# get standardized differences
matchedtab1 <- CreateTableOne(vars=xvars, strata="treatment", data=matched, test=FALSE)
print (matchedtab1, smd=TRUE)
psmatch<-Match(Tr=lalonde$treat,M=1,X=pscore,replace=FALSE)
matched<-lalonde[unlist(psmatch[c("index.treated","index.control")]), ]
#get standardized differences \
matchedtab1<-CreateTableOne(vars=xvars, strata ="treat", data=matched, test = FALSE)
print(matchedtab1, smd = TRUE)
#get standardized differences \
xvars2 <- colnames(lalonde)
xvars2 <- xvars2[xvars2!='treat']
matchedtab1<-CreateTableOne(vars=xvars2, strata ="treat", data=matched, test = FALSE)
print(matchedtab1, smd = TRUE)
# Data loadin
library(tableone)
library(Matching)
library(MatchIt)
data(lalonde)
# Question1 SMD
xvars <- colnames(lalonde)
xvars <- xvars[xvars!='treat']
table1<- CreateTableOne(vars=xvars,strata="treat", data=lalonde, test=FALSE)
print(table1,smd=TRUE)
# Question2 unadjusted mean
library(dplyr)
treated_mean <- mean(lalonde[lalonde$treat==1,]$re78)
untreated_mean <- mean(lalonde[lalonde$treat==0,]$re78)
print(treated_mean-untreated_mean)
# Question3: propensity score estimation
psmodel<-glm(treat~age+educ+black+hispan+married+nodegree+re74+re75,
family=binomial(),data=lalonde)
#show coefficients etc
summary(psmodel)
#create propensity score
pscore<-psmodel$fitted.values
# max and min of psc
max(pscore)
min(pscore)
# Question4&5: after PSM
set.seed(931139)
psmatch<-Match(Tr=lalonde$treat,M=1,X=pscore,replace=FALSE)
matched<-lalonde[unlist(psmatch[c("index.treated","index.control")]), ]
matchedtab1<-CreateTableOne(vars=xvars, strata ="treat",
data=matched, test = FALSE)
print(matchedtab1, smd = TRUE)
# Question6: Redo matching using caliper
set.seed(931139)
psmatch<-Match(Tr=lalonde$treat,M=1,X=pscore,replace=FALSE, caliper = 0.1)
matched<-lalonde[unlist(psmatch[c("index.treated","index.control")]), ]
matchedtab2<-CreateTableOne(vars=xvars, strata ="treat",
data=matched, test = FALSE)
print(matchedtab2, smd = TRUE)
# Question7:
treated_mean2 <- mean(matched[matched$treat==1,]$re78)
untreated_mean2 <- mean(matched[matched$treat==0,]$re78)
print(treated_mean2-untreated_mean2)
# Question8:
#outcome analysis
y_trt<-matched$re78[matched$treat==1]
y_con<-matched$re78[matched$treat==0]
#pairwise difference
diffy<-y_trt-y_con
#paired t-test
t.test(diffy)
install.packages("tableone")
install.packages("Matching")
install.packages("MatchIt")
install.packages("ipw")
install.packages("survey")
install.packages("sandwich")
# Data loading
library(tableone)
library(Matching)
library(MatchIt)
library(ipw)
library(survey)
library(sandwich)
data(lalonde)
# Q1: What are the minimum and maximum weights?
xvars <- colnames(lalonde)
xvars <- xvars[xvars!='treat']
# propensity score model
psmodel<-glm(treat~age+educ+black+hispan+married+nodegree+re74+re75,
family=binomial(link ="logit"),data=lalonde)
# value of propensity score for each subject
ps <- predict(psmodel, type = "response")
lalonde$pscore <- ps
# create weights
weight<-ifelse(lalonde$treat==1,1/(ps),1/(1-ps))
# max and min of weights
print(max(weight))
print(min(weight))
# Q2: SMD after weighting
# apply weights to data
weighteddata<-svydesign(ids = ~ 1, data =lalonde, weights = ~ weight)
# weighted table
weightedtable <-svyCreateTableOne(vars = xvars, strata = "treat",
data = weighteddata, test = FALSE)
print(weightedtable, smd = TRUE)
print(weightedtable, smd = TRUE)
# Q2: SMD after weighting
# apply weights to data
weighteddata<-svydesign(ids = ~ 1, data =lalonde, weights = ~ weight)
# weighted table
weightedtable <-svyCreateTableOne(vars = xvars, strata = "treat",
data = weighteddata, test = FALSE)
print(weightedtable, smd = TRUE)
# Q3: ATE after weighting
msm <- (svyglm(re78 ~ treat, design = svydesign(~ 1, weights = ~ weight, data=lalonde)))
coef(msm)
confint(msm)
# Q4: ATE after weight truncating
weightmodel <- ipwpoint(exposure = treat, family = "binomial", link = "logit", numerator = ~ 1,
denominator = ~ age + educ + black + hispan + married + nodegree + re74 + re75,
data = lalonde, trunc = 0.01)
msm_trunc <- (svyglm(re78 ~ treat, design = svydesign(~ 1, weights = ~ weightmodel$weights.trunc, data=lalonde)))
coef(msm_trunc)
confint(msm_trunc)
# Q2: SMD after weighting
# apply weights to data
weighteddata<-svydesign(ids = ~ 1, data =lalonde, weights = ~ weight)
# weighted table
weightedtable <-svyCreateTableOne(vars = xvars, strata = "treat",
data = weighteddata, test = FALSE)
print(weightedtable)
